name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=raw,value=latest
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:buildcache,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=raw,value=latest
          type=sha,prefix={{branch}}-

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:buildcache,mode=max

  deploy:
    name: Deploy to Server
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Criar diretório se não existir
          mkdir -p ~/mindera-games
          cd ~/mindera-games
          
          # Criar docker-compose.prod.yml
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'

          services:
            backend:
              image: ghcr.io/${{ github.repository }}/backend:latest
              container_name: halloweengo-backend
              ports:
                - "5002:5002"
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - PORT=5002

            frontend:
              image: ghcr.io/${{ github.repository }}/frontend:latest
              container_name: halloweengo-frontend
              ports:
                - "3000:3000"
              restart: unless-stopped
              depends_on:
                - backend
          EOF
          
          # Pull latest images
          docker compose -f docker-compose.prod.yml pull
          
          # Stop and remove old containers
          docker compose -f docker-compose.prod.yml down
          
          # Start new containers
          docker compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -af
          
          # Show running containers
          docker compose -f docker-compose.prod.yml ps
